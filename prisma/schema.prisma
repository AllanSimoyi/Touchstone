generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl    = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  relationMode = "prisma"
}

model SupportJob {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  account         Account @relation(fields: [accountId], references: [id])
  accountId       Int
  clientStaffName String  @db.VarChar(100)

  supportPersonId Int
  supportPerson   User @relation("support_person", fields: [supportPersonId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  supportType String @db.VarChar(500)
  status      String @db.VarChar(100)

  enquiry     String @db.Text
  actionTaken String @db.Text

  charge Decimal  @db.Decimal(19, 2)
  date   DateTime @default(now())

  userId Int
  user   User @relation("job_author", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  events SupportJobEvent[]

  @@map("support_job")
}

model SupportJobEvent {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  supportJobId Int
  supportJob   SupportJob @relation(fields: [supportJobId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  details String @db.Text
  kind    String @db.VarChar(20)

  @@map("support_job_event")
}

model Account {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accountNumber String @db.VarChar(20)
  companyName   String @db.VarChar(200)
  tradingAs     String @db.VarChar(200)
  formerly      String @db.VarChar(200)

  groupId Int?
  group   Group? @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  areaId Int?
  area   Area? @relation(fields: [areaId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  sectorId Int?
  sector   Sector? @relation(fields: [sectorId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  vatNumber   String @db.VarChar(200)
  otherNames  String @db.VarChar(200)
  description String @db.VarChar(1600)
  actual      Int
  reason      String @db.VarChar(500)

  statusId Int?
  status   Status? @relation(fields: [statusId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  contractNumber String    @db.VarChar(30)
  dateOfContract DateTime?

  licenseId Int?
  license   License? @relation(fields: [licenseId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  licenseDetailId Int?
  licenseDetail   LicenseDetail? @relation(fields: [licenseDetailId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  addedPercentage Int
  gross           Decimal @db.Decimal(19, 2)
  net             Decimal @db.Decimal(19, 2)
  vat             Decimal @db.Decimal(19, 2)
  comment         String  @db.VarChar(1600)

  ceoName  String @db.VarChar(50)
  ceoEmail String @db.VarChar(50)
  ceoPhone String @db.VarChar(40)
  ceoFax   String @db.VarChar(20)

  physicalAddress String @db.VarChar(500)
  telephoneNumber String @db.VarChar(40)
  faxNumber       String @db.VarChar(40)
  cellphoneNumber String @db.VarChar(40)

  accountantName  String @db.VarChar(100)
  accountantEmail String @db.VarChar(100)

  boxCityId Int?
  boxCity   City?  @relation("boxCity", fields: [boxCityId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  boxNumber String @db.VarChar(200)
  boxArea   String @db.VarChar(200)

  deliveryCityId  Int?
  deliveryCity    City?  @relation("deliveryCity", fields: [deliveryCityId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  deliveryAddress String @db.VarChar(300)
  deliverySuburb  String @db.VarChar(100)

  databases   Database[]
  operators   Operator[]
  events      AccountEvent[]
  supportJobs SupportJob[]

  @@map("accounts")
}

model AccountEvent {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accountId Int
  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  details String @db.Text
  kind    String @db.VarChar(20)

  @@map("account_event")
}

model Area {
  id         Int      @id @default(autoincrement())
  identifier String   @unique @db.VarChar(100)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  accounts Account[]
  events   AreaEvent[]

  @@map("areas")
}

model AreaEvent {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  areaId Int
  area   Area @relation(fields: [areaId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  details String @db.Text
  kind    String @db.VarChar(20)

  @@map("area_event")
}

model City {
  id            Int         @id @default(autoincrement())
  identifier    String      @unique @db.VarChar(100)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  accountCities Account[]   @relation("deliveryCity")
  boxCities     Account[]   @relation("boxCity")
  events        CityEvent[]

  @@map("cities")
}

model CityEvent {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cityId Int
  city   City @relation(fields: [cityId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  details String @db.Text
  kind    String @db.VarChar(20)

  @@map("city_event")
}

model Database {
  id Int @id @default(autoincrement())

  accountId Int
  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  databaseName String          @db.VarChar(50)
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  events       DatabaseEvent[]

  @@map("databasez")
}

model DatabaseEvent {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  databaseId Int
  database   Database @relation(fields: [databaseId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  details String @db.Text
  kind    String @db.VarChar(20)

  @@map("database_event")
}

model Group {
  id         Int      @id @default(autoincrement())
  identifier String   @unique @db.VarChar(100)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  accounts Account[]
  events   GroupEvent[]

  @@map("groupz")
}

model GroupEvent {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  groupId Int
  group   Group @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  details String @db.Text
  kind    String @db.VarChar(20)

  @@map("group_event")
}

model LicenseDetail {
  id         Int      @id @default(autoincrement())
  identifier String   @unique @db.VarChar(500)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  accounts Account[]
  events   LicenseDetailEvent[]

  @@map("licensedetails")
}

model LicenseDetailEvent {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  licenseDetailId Int
  licenseDetail   LicenseDetail @relation(fields: [licenseDetailId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  details String @db.Text
  kind    String @db.VarChar(20)

  @@map("licensedetails_event")
}

model License {
  id         Int      @id @default(autoincrement())
  identifier String   @unique @db.VarChar(100)
  basicUsd   Decimal  @db.Decimal(19, 2)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  accounts Account[]
  events   LicenseEvent[]

  @@map("licenses")
}

model LicenseEvent {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  licenseId Int
  license   License @relation(fields: [licenseId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  details String @db.Text
  kind    String @db.VarChar(20)

  @@map("license_event")
}

model Operator {
  id Int @id @default(autoincrement())

  accountId Int
  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  operatorName  String          @db.VarChar(30)
  operatorEmail String          @db.VarChar(50)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  events        OperatorEvent[]

  @@map("operatorz")
}

model OperatorEvent {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  operatorId Int
  operator   Operator @relation(fields: [operatorId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  details String @db.Text
  kind    String @db.VarChar(20)

  @@map("operator_event")
}

model Sector {
  id         Int      @id @default(autoincrement())
  identifier String   @unique @db.VarChar(100)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  accounts Account[]
  events   SectorEvent[]

  @@map("sectors")
}

model SectorEvent {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sectorId Int
  sector   Sector @relation(fields: [sectorId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  details String @db.Text
  kind    String @db.VarChar(20)

  @@map("sector_event")
}

model Status {
  id         Int      @id @default(autoincrement())
  identifier String   @unique @db.VarChar(100)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  accounts Account[]
  events   StatusEvent[]

  @@map("statuses")
}

model StatusEvent {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  statusId Int
  status   Status @relation(fields: [statusId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  details String @db.Text
  kind    String @db.VarChar(20)

  @@map("status_event")
}

model User {
  id          Int      @id @default(autoincrement())
  username    String   @unique @db.VarChar(40)
  password    String   @db.Text
  accessLevel String   @db.VarChar(40)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  accountEvents        AccountEvent[]
  areaEvents           AreaEvent[]
  cityEvents           CityEvent[]
  databaseEvents       DatabaseEvent[]
  groupEvents          GroupEvent[]
  licenseDetailEvents  LicenseDetailEvent[]
  licenseEvents        LicenseEvent[]
  operatorEvents       OperatorEvent[]
  sectorEvents         SectorEvent[]
  statusEvents         StatusEvent[]
  eventsImposed        UserEvent[]          @relation("record")
  eventsAuthored       UserEvent[]          @relation("author")
  supportJobsAuthored  SupportJob[]         @relation("job_author")
  supportJobsWorkingOn SupportJob[]         @relation("support_person")
  supportJobEvents     SupportJobEvent[]

  @@map("users")
}

model UserEvent {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  recordId Int
  record   User @relation("record", fields: [recordId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  userId Int
  user   User @relation("author", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  details String @db.Text
  kind    String @db.VarChar(20)

  @@map("user_event")
}
