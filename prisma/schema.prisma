generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Accountant {
  id Int @id @default(autoincrement())

  accountId Int
  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  accountantName  String   @db.VarChar(20)
  accountantEmail String   @db.VarChar(100)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("accountants")
}

model Account {
  id            Int    @id @default(autoincrement())
  accountNumber String @db.VarChar(20)
  companyName   String @db.VarChar(200)
  tradingAs     String @db.VarChar(200)
  formerly      String @db.VarChar(200)

  groupId Int
  group   Group @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  areaId Int
  area   Area @relation(fields: [areaId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  sectorId Int
  sector   Sector @relation(fields: [sectorId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  vatNumber   String @db.VarChar(200)
  otherNames  String @db.VarChar(200)
  description String @db.VarChar(1600)
  actual      Int
  reason      String @db.VarChar(500)

  statusId Int
  status   Status @relation(fields: [statusId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  contractNumber String    @db.VarChar(30)
  dateOfContract DateTime?

  licenseId Int
  license   License @relation(fields: [licenseId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  licenseDetailId Int
  licenseDetail   LicenseDetail @relation(fields: [licenseDetailId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  addedPercentage Int
  gross           Decimal  @db.Decimal(19, 2)
  net             Decimal  @db.Decimal(19, 2)
  vat             Decimal  @db.Decimal(19, 2)
  comment         String   @db.VarChar(1600)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  accountants       Accountant[]
  boxes             Box[]
  ceos              Ceo[]
  contacts          Contact[]
  databases         Database[]
  operators         Operator[]
  deliveryAddresses DeliveryAddress[]

  @@map("accounts")
}

model Area {
  id         Int      @id @default(autoincrement())
  identifier String   @db.VarChar(100)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  account Account[]

  @@map("areas")
}

model Box {
  id Int @id @default(autoincrement())

  accountId Int
  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  boxCityId Int
  boxCity   City @relation(fields: [boxCityId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  boxNumber String   @db.VarChar(200)
  boxArea   String   @db.VarChar(200)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("boxes")
}

model Ceo {
  id Int @id @default(autoincrement())

  accountId Int
  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  ceoName   String   @db.VarChar(50)
  ceoEmail  String   @db.VarChar(50)
  ceoPhone  String   @db.VarChar(40)
  ceoFax    String   @db.VarChar(20)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("ceos")
}

model City {
  id         Int      @id @default(autoincrement())
  identifier String   @db.VarChar(100)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  boxes             Box[]
  deliveryAddresses DeliveryAddress[]

  @@map("cities")
}

model Contact {
  id Int @id @default(autoincrement())

  accountId Int
  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  physicalAddress String   @db.VarChar(500)
  telephoneNumber String   @db.VarChar(40)
  faxNumber       String   @db.VarChar(40)
  cellphoneNumber String   @db.VarChar(40)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("contacts")
}

model Database {
  id Int @id @default(autoincrement())

  accountId Int
  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  databaseName String   @db.VarChar(50)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("databasez")
}

model DeliveryAddress {
  id Int @id @default(autoincrement())

  accountId Int
  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  deliveryCityId Int
  deliveryCity   City @relation(fields: [deliveryCityId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  deliveryAddress String   @db.VarChar(300)
  deliverySuburb  String   @db.VarChar(100)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("deliveryaddresses")
}

model Event {
  id        Int    @id @default(autoincrement())
  kind      String @db.VarChar(20)
  tableName String @db.VarChar(30)

  recordId Int

  details String @db.Text

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  username  String   @db.VarChar(200)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("eventz")
}

model Group {
  id         Int      @id @default(autoincrement())
  identifier String   @db.VarChar(100)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  accounts Account[]

  @@map("groupz")
}

model LicenseDetail {
  id         Int      @id @default(autoincrement())
  identifier String   @db.VarChar(500)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  accounts Account[]

  @@map("licensedetails")
}

model License {
  id         Int      @id @default(autoincrement())
  identifier String   @db.VarChar(100)
  basicUsd   Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  accounts Account[]

  @@map("licenses")
}

model Operator {
  id Int @id @default(autoincrement())

  accountId Int
  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  operatorName  String   @db.VarChar(30)
  operatorEmail String   @db.VarChar(50)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("operatorz")
}

model Sector {
  id         Int      @id @default(autoincrement())
  identifier String   @db.VarChar(100)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  accounts Account[]

  @@map("sectors")
}

model Status {
  id         Int      @id @default(autoincrement())
  identifier String   @db.VarChar(100)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  accounts Account[]

  @@map("statuses")
}

model Role {
  id          Int      @id @default(autoincrement())
  accessLevel String   @db.VarChar(15)
  feature     String   @db.VarChar(20)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  users User[]

  @@map("roles")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @db.VarChar(40)
  password  String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roleId Int
  role   Role @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  events Event[]

  @@map("users")
}
